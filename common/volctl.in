#!/usr/bin/env bash

APP_VERSION=@APP_VERSION@
SCRIPT="${0}"
SCRIPT_NAME="$(basename ${SCRIPT})"

SKEL="@DATADIR@/config.skel"
CONFIG="${XDG_CONFIG_HOME:-$HOME/.config}/volctl/config"

declare -ir \
    DEFAULT_VOLUME_STEP_SIZE=5 \
    DEFAULT_UPPER_THRESHOLD=100

declare -ir \
    ERR_USAGE=64

VOLUME_STEP_SIZE=""
UPPER_THRESHOLD=""

has_color() {
    (( $(tput colors 2>/dev/null || echo 0) >= 8 )) && [ -t 1 ]
}

setup_color() {
    if has_color; then
        RESET=$'\033[0m'
        RED=$'\033[0;31m'
        GREEN=$'\033[0;32m'
        YELLOW=$'\033[0;33m'
        MAGENTA=$'\033[0;35m'
        CYAN=$'\033[0;36m'
        BOLD="\e[01m"
    fi
}

ARGUMENTS="(--up | --down | --mute) [--help ] [--version]"

show_help(){
  cat <<- EOF
	Usage: ${SCRIPT_NAME} ${ARGUMENTS}

	volctl controls system volume

	Options:
	  up          increase volume
	  down        decrease volume
	  mute        toggle mute
	  --help      show this help message and exit
	  --version   show program's version number and exit
	EOF
}

usage_error(){
	echo "Usage: ${SCRIPT} ${ARGUMENTS}" >&2
    exit $ERR_USAGE
}

is_int(){
    [[ "$1" =~ ^[0-9]+$ ]]
}

make_config(){
    if [[ ! -f "${SKEL}" ]]; then
        echo -e "${RED}${SKEL} is missing. Reinstall this package to continue."${RESET}
        exit 1
    fi

    # not really required, since this function will only be called 
    # when the configuration file is missing
    if [[ ! -f "$CONFIG" ]]; then 
        echo -e ${BOLD}'------------------------------------------------------------'${RESET}
        echo -e ${BOLD}' No config file found so creating a fresh one in:'${RESET}
        echo -e ${BOLD}${CYAN}" $CONFIG"${RESET} 
        echo

        install -Dm644 "$SKEL" "$CONFIG"

        echo -e ${BOLD}" Edit this file if desired."${RESET}
        echo -e ${BOLD}'------------------------------------------------------------'${RESET}
    fi
}

load_config(){
    if [[ ! -f "${CONFIG}" ]]; then
        make_config
    fi

    source "${CONFIG}"
    is_int "$VOLUME_STEP_SIZE" || VOLUME_STEP_SIZE="${DEFAULT_VOLUME_STEP_SIZE}"
    is_int "$UPPER_THRESHOLD" || UPPER_THRESHOLD="${DEFAULT_UPPER_THRESHOLD}"
}

is_muted() {
    return `pacmd list-sinks|grep -A 15 '* index' | awk '/muted:/{ print $2 }' | grep -q 'yes'`
    # return `pactl get-sink-mute @DEFAULT_SINK@ | grep -q 'yes'`
}

setup_color

load_config

# volume=`pactl get-sink-volume @DEFAULT_SINK@ | awk -W posix '/^Volume: / {gsub("%,?", ""); print $5; exit}'`
volume=`pacmd list-sinks|grep -A 15 '* index' | awk -W posix '/volume: / {gsub("%,?", ""); print $5; exit}'`

operation="$1"
case "$operation" in

    up | down)
        if [ "$operation" == "up" ]
        then
            let volume+=VOLUME_STEP_SIZE
        else
            let volume-=VOLUME_STEP_SIZE
        fi
        if ((volume>UPPER_THRESHOLD))
        then
            volume=$UPPER_THRESHOLD
        elif ((volume<0))
        then
            volume=0
        fi
        
        pactl set-sink-volume @DEFAULT_SINK@ ${volume}%
        echo "volume set to ${volume}%"
        ;;

    mute)
        pactl set-sink-mute @DEFAULT_SINK@ toggle
        if is_muted
        then
            echo "muted"
        else
            echo "unmuted"
        fi
        ;;

    --version)
        echo "$(basename ${0}) ${APP_VERSION}"
        ;;

    --help)
        show_help
        ;;

    *)
        usage_error
        ;;

esac

