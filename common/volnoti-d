#!/usr/bin/env bash

# Volume change sound.
declare -r VOLUME_CHANGE_SOUND=${VOLUME_CHANGE_SOUND:-/usr/share/sounds/freedesktop/stereo/audio-volume-change.oga}

# Configuration to decide to play sound or not
declare -r PLAY_SOUND=true

declare -r \
    RESET=$'\033[0m' \
    RED=$'\033[0;31m' \
    BOLD="\e[01m"

declare prev_volume # notify only on volume change 
declare card_change=false # don't play sound on card_change
declare mute_state_change=false # show notification on mute toggle

declare -r \
    MS_UNMUTE="unmute" \
    MS_MUTE="mute"

get_mute_state() {
    local state="${MS_UNMUTE}"
    if pactl get-sink-mute @DEFAULT_SINK@ | grep -q 'yes'
    then
        state="${MS_MUTE}"
    fi

    echo "${state}"
}

get_volume(){
    echo `pactl get-sink-volume @DEFAULT_SINK@ | awk -W posix '/^Volume: / {gsub("%,?", ""); print $5; exit}'`
}

get_default_sink_index(){
    pactl list sinks | awk -W posix '/^Sink #/{gsub("#", ""); idx = $2}
        /^[ \t]+Name: / {insink = $2 == "'"$(pactl get-default-sink)"'"; if (insink) { print idx }; exit}'
}

check_command(){
    cmd="$1"
    pkg="$2"

    command -v "${cmd}" >/dev/null 2>&1 || {
        echo -e "${RED}${BOLD}ERROR"'!!'"${RESET} command ${BOLD}${cmd}${RESET} is missing." >&2
        echo -e "Install ${BOLD}${pkg}${RESET} package, that provides it. Aborting." >&2
        exit 1; 
    }
}

play_volume_changed(){
    $PLAY_SOUND || return
    paplay -d  @DEFAULT_SINK@ "${VOLUME_CHANGE_SOUND}" & 
}

declare -ar ICONS_SYMBOLIC=(
    audio-volume-muted-symbolic
    audio-volume-low-symbolic
    audio-volume-medium-symbolic
    audio-volume-high-symbolic
)

get_volume_icon() {
    local -r volume="$1"
    local icon=${ICONS_SYMBOLIC[0]} 

    if [ "$(get_mute_state)" = "${MS_UNMUTE}" ]; then
        if (( volume < 30 )); then icon=${ICONS_SYMBOLIC[1]}
        elif (( volume < 70 )); then icon=${ICONS_SYMBOLIC[2]}
        else icon=${ICONS_SYMBOLIC[3]}
        fi
    fi

    echo "$icon"
}


replaces_id=0
show_notification(){
    local -r volume="$1"

    replaces_id=`gdbus call --session \
        --dest org.freedesktop.Notifications \
        --object-path /org/freedesktop/Notifications \
        --method org.freedesktop.Notifications.Notify \
        volctl \
        ${replaces_id} \
        $(get_volume_icon "${volume}") \
        "Volume ${volume}%" \
        "" \
        [] \
        "{'transient':<true>, 'x-canonical-private-synchronous':<''>, 'value':<$volume>, 'suppress-sound': <true>}" \
        2000 \
        | sed 's/[^ ]* //; s/,.//'`
}

# TODO Check if already running
# TODO check if required commands exists
# TODO check if notification server exists

prev_volume=$(get_volume)
prev_mute_state=$(get_mute_state)

while IFS= read -r line; do
    if echo "${line}" | grep -q card
    then
        card_change=true
        continue
    fi
    sink=`echo "${line}" | awk -F# '{print $2}'`
    current_mute_state="$(get_mute_state)"
    if [ "${current_mute_state}" != "${prev_mute_state}" ]
    then
        mute_state_change=true
        prev_mute_state=$current_mute_state
    fi

    current_volume=$(get_volume)
    if [ "$current_volume" == "$prev_volume" ] && [ "$card_change" != true ] && [ "$mute_state_change" != true ]
    then
        continue
    fi
    # show notifcation on volume change || card change || mute_toggle but don't play sound on card change
    if [ "${sink}" == "$(get_default_sink_index)" ]
    then
        prev_volume=$current_volume

        display_volume=$current_volume
        if((display_volume>100))
        then
            display_volume=100
        fi

        show_notification ${display_volume}
        if [ "$card_change" != true ]
        then
            play_volume_changed
        fi
    fi
    card_change=false
    mute_state_change=false
    
done < <(pactl subscribe | stdbuf -oL grep -e "Event 'change' on sink #" -e "Event 'change' on card #")

