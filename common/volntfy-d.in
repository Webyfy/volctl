#!/usr/bin/env bash

APP_VERSION=@APP_VERSION@
SCRIPT="${0}"
SCRIPT_NAME="$(basename ${SCRIPT})"

CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/volctl"

declare -ir \
    ERR_USAGE=64

generate_usage(){
    echo "Usage: ${1} [--help] [--version]"
}

show_help(){
  local usage=$(generate_usage ${SCRIPT_NAME})
  
  cat <<- EOF
	${usage}

	volntfy-d is a daemon for showing volume notifications

	Options:
	    --help              show help message and exit
	    --version           show program's version number and exit
	EOF
}

show_usage_error(){
  local usage=$(generate_usage ${SCRIPT})

  echo "${usage}" >&2
  exit $ERR_USAGE
}


# Volume change sound.
declare -r VOLUME_CHANGE_SOUND=${VOLUME_CHANGE_SOUND:-/usr/share/sounds/freedesktop/stereo/audio-volume-change.oga}

# Configuration to decide to play sound or not
declare -r PLAY_SOUND=true

declare -r \
    RESET=$'\033[0m' \
    RED=$'\033[0;31m' \
    BOLD="\e[01m"

declare prev_volume # notify only on volume change 
declare card_change=false # don't play sound on card_change
declare mute_state_change=false # show notification on mute toggle

declare -r \
    MS_UNMUTE="unmute" \
    MS_MUTE="mute"

check_command(){
    cmd="$1"
    pkg="$2"

    command -v "${cmd}" >/dev/null 2>&1 || {
        echo -e "${RED}${BOLD}ERROR"'!!'"${RESET} command ${BOLD}${cmd}${RESET} is missing." >&2
        echo -e "Install ${BOLD}${pkg}${RESET} package, that provides it. Aborting." >&2
        exit 1; 
    }
}

check_prerequisites(){
    mkdir -p "${CONFIG_DIR}" || {
        echo -e "${RED}${BOLD}ERROR"'!!'"${RESET} Failed to create configuration directory. Aborting." >&2
        exit 1; 
    }

    # Check if required commands exists
    local -Ar command_package=( 
        [volntfy]="volctl" 
        [pactl]="pulseaudio-utils" 
        [stdbuf]="coreutils" 
        [flock]="util-linux" 
    )
    for cmd in "${!command_package[@]}"
    do
        package="${command_package[${cmd}]}"
        check_command "${cmd}" "${package}"
    done

    # TODO check if notification server exists
}

LOCKFILE="${CONFIG_DIR}/lock"
LOCKFD=666

prepare_locking(){
    eval "exec ${LOCKFD}>\"${LOCKFILE}\"" || {
        echo -e "${RED}${BOLD}ERROR"'!!'"${RESET} File descriptor redirect to lock file failed. Aborting." >&2
        exit 1; 
    }
}

acquire_lock(){
    flock -x -n ${LOCKFD} || {
        echo -e "${RED}${BOLD}ERROR"'!!'"${RESET} Failed to acquire lock. Aborting." >&2
        exit 1; 
    }
}

release_lock(){
    flock -u ${LOCKFD}
}

init(){
    check_prerequisites
    
    prepare_locking

    acquire_lock
    trap release_lock EXIT
}

get_mute_state() {
    local state="${MS_UNMUTE}"
    # if pactl get-sink-mute @DEFAULT_SINK@ | grep -q 'yes'
    if `pacmd list-sinks|grep -A 15 '* index' | awk '/muted:/{ print $2 }' | grep -q 'yes'`; 
    then 
        state="${MS_MUTE}"
    fi

    echo "${state}"
}

get_volume(){
    echo `pacmd list-sinks|grep -A 15 '* index' | awk -W posix '/volume: / {gsub("%,?", ""); print $5; exit}'`
    # echo `pactl get-sink-volume @DEFAULT_SINK@ | awk -W posix '/^Volume: / {gsub("%,?", ""); print $5; exit}'`
}

get_default_sink_index(){
    pacmd list-sinks|awk '/\* index:/{ print $3 }'
    # pactl list sinks | awk -W posix '/^Sink #/{gsub("#", ""); idx = $2}
    #     /^[ \t]+Name: / {insink = $2 == "'"$(pactl get-default-sink)"'"; if (insink) { print idx }; exit}'
}

play_volume_changed(){
    $PLAY_SOUND || return
    paplay -d  @DEFAULT_SINK@ "${VOLUME_CHANGE_SOUND}" & 
}

main(){
    init

    prev_volume=$(get_volume)
    prev_mute_state=$(get_mute_state)
    replaces_id=0

    while IFS= read -r line; do
        if echo "${line}" | grep -q card
        then
            card_change=true
            continue
        fi
        sink=`echo "${line}" | awk -F# '{print $2}'`
        current_mute_state="$(get_mute_state)"
        if [ "${current_mute_state}" != "${prev_mute_state}" ]
        then
            mute_state_change=true
            prev_mute_state=$current_mute_state
        fi

        current_volume=$(get_volume)
        if [ "$current_volume" == "$prev_volume" ] && [ "$card_change" != true ] && [ "$mute_state_change" != true ]
        then
            continue
        fi
        # show notifcation on volume change || card change || mute_toggle but don't play sound on card change
        if [ "${sink}" == "$(get_default_sink_index)" ]
        then
            prev_volume=$current_volume

            if [ "${current_mute_state}" == "${MS_UNMUTE}" ]
            then
                replaces_id=`volntfy -id ${replaces_id} ${current_volume}`
            else
                replaces_id=`volntfy -m -id ${replaces_id} ${current_volume}`
            fi

            if [ "$card_change" != true ]
            then
                play_volume_changed
            fi
        fi
        card_change=false
        mute_state_change=false
        
    done < <(pactl subscribe | stdbuf -oL grep -e "Event 'change' on sink #" -e "Event 'change' on card #")
}

handle_options(){
  option="${1}"

  case "${option}" in
    --help)
      show_help
      ;;

    --version)
      echo "${SCRIPT_NAME} ${APP_VERSION}"
      ;;

    *)
      show_usage_error
  esac
}

if [ $# -eq 0 ]; then
  main
elif [ $# -eq 1 ]; then
  handle_options "${1}"
else
  show_usage_error
fi
